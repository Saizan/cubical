module univalence where

import primitive

subst : (A : U) (P : A -> U) (a x : A) (p : Id A a x) -> P a -> P x
subst A P a x p d = J A a (\ x q -> P x) d x p

typEquivS : (A B : U) -> (f : A -> B) -> U
typEquivS A B f = (y : B) -> fiber A B f y

typEquivT : (A B : U) -> (f : A -> B) -> (typEquivS A B f) -> U
typEquivT A B f s =  (y : B) -> (v : fiber A B f y) -> Id (fiber A B f y) (s y) v

isEquiv : (A B : U) (f : A -> B) -> U
isEquiv A B f = Sigma (typEquivS A B f) (typEquivT A B f)

transpReflId : (A:U) -> Id (A->A) (id A) (transport A A (refl U A))
transpReflId A = undefined -- funExt A (\ _ -> A)  (id A) (transport A A (refl U A)) (transportRef A)

-- the transport of any equality proof is an equivalence

transpIsEquiv : (A B:U) -> (p:Id U A B) -> isEquiv A B (transport A B p)
transpIsEquiv A =
  J U A (\ B p -> isEquiv A B (transport A B p)) rem
  where rem : isEquiv A A (transport A A (refl U A))
        rem = subst (A -> A) (isEquiv A A)  (id A) (transport A A (refl U A))
                (transpReflId A) (pair undefined undefined)

test : (A B : U) (f : A -> B) 
        (s : (y : B) -> fiber A B f y) -> 
        (t : (y : B) -> (v : fiber A B f y) -> Id (fiber A B f y) (s y) v) ->
         Id (isEquiv A B (transport A B (equivEq A B f s t)))
                        (transpIsEquiv A B (equivEq A B f s t))
                        (transpIsEquiv A B (equivEq A B f s t))
test A B f s t = refl (isEquiv A B (transport A B (equivEq A B f s t)))
                        (transpIsEquiv A B (equivEq A B f s t))
