module univalence where

import lemId

transpReflId : (A:U) -> Id (A->A) (id A) (transport A A (refl U A))
transpReflId A = undefined -- funExt A (\ _ -> A)  (id A) (transport A A (refl U A)) (transportRef A)

-- the transport of any equality proof is an equivalence

transpIsEquiv : (A B:U) -> (p:Id U A B) -> isEquiv A B (transport A B p)
transpIsEquiv A = J U A (\ B p -> isEquiv A B (transport A B p)) rem
 where rem : isEquiv A A (transport A A (refl U A))
       rem = subst (A -> A) (isEquiv A A)  (id A) (transport A A (refl U A)) (transpReflId A) (idIsEquiv A)

Equiv : U -> U -> U
Equiv A B = Sigma (A->B) (isEquiv A B)

funEquiv : (A B : U) -> Equiv A B -> A -> B
funEquiv A B = undefined -- fst (A->B) (isEquiv A B)

eqEquiv : (A B : U) (e0 e1:Equiv A B) -> Id (A -> B) (funEquiv A B e0) (funEquiv A B e1) -> Id (Equiv A B) e0 e1
eqEquiv A B = undefined --  eqPropFam (A->B) (isEquiv A B) (propIsEquiv A B)

test : (A B : U) (f : A -> B) 
        (s : (y : B) -> fiber A B f y) -> 
        (t : (y : B) -> (v : fiber A B f y) -> Id (fiber A B f y) (s y) v) ->
         Id (Equiv A B) (pair f (pair s t))
                        (pair (transport A B (equivEq A B f s t)) (transpIsEquiv A B (equivEq A B f s t)))
test A B f s t = eqEquiv A B (pair f (pair s t))
                             (pair (transport A B (equivEq A B f s t)) (transpIsEquiv A B (equivEq A B f s t)))
                             undefined -- rem3



