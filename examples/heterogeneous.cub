module heterogeneous where

import primitive
import prelude
import gradLemma1

eqFst : (A : U) (B : A -> U) (u v : Sigma A B) ->
        Id (Sigma A B) u v -> Id A u.1 v.1
eqFst A B = mapOnPath (Sigma A B) A (fst A B)

eqSnd : (A : U) (B : A -> U) (u v : Sigma A B) (p : Id (Sigma A B) u v) ->
        IdS A B u.1 v.1 (eqFst A B u v p) u.2 v.2
eqSnd A B = mapOnPathD (Sigma A B) (\x -> B x.1) (snd A B)

eqPair1 : (A : U) (B : A -> U) (a0 a1 : A) (b0 : B a0) (b1 : B a1) ->
        Id (Sigma A B) (a0,b0) (a1,b1) -> Id A a0 a1
eqPair1 A B a0 a1 b0 b1 = eqFst A B (a0,b0) (a1,b1)

-- eqPair2 : (A : U) (B : A -> U) (a0 a1 : A) (b0 : B a0) (b1 : B a1)
--        (p : Id (Sigma A B) (pair a0 b0) (pair a1 b1)) ->
--        IdS A B a0 a1 (eqPair1 A B a0 a1 b0 b1 p) b0 b1
-- eqPair2 A B a0 a1 b0 b1 = eqSnd A B (pair a0 b0) (pair a1 b1)

-- expandedPair : (A : U) (B : A -> U) -> Sigma A B -> Sigma A B
-- expandedPair A B x = pair (fst A B x) (snd A B x)

-- conversion test:
reflIdIdP : (A:U) (a b : A) -> Id U (Id A a b) (IdP A A (refl U A) a b)
reflIdIdP A a b = refl U (Id A a b)

-- conversion test:
reflS : (A:U) (F:A -> U) (a:A) (b : F a) -> IdS A F a a (refl A a) b b
reflS A F a b = refl (F a) b

-- conversion test:
composeMapOnPath : (A : U) (B : A -> U) (u v : Sigma A B) ->
                   (p : Id (Sigma A B) u v) ->
  Id (Id U (B (fst A B u)) (B (fst A B v)))
    (mapOnPath (Sigma A B) U (\x -> B (fst A B x)) u v p)
    (mapOnPath A U B (fst A B u) (fst A B v) (mapOnPath (Sigma A B) A (fst A B) u v p))
composeMapOnPath A B u v p = refl (Id U (B (fst A B u)) (B (fst A B v)))
          (mapOnPath (Sigma A B) U (\x -> B (fst A B x)) u v p)


-- eqFstSnd : (A : U) (B : A -> U) (u v : Sigma A B) ->
--            Id U
--              (Id (Sigma A B) u v)
-- 	     (Sigma (Id A (fst A B u) (fst A B v))
--                     (\p -> IdS A B (fst A B u) (fst A B v) p (snd A B u) (snd A B v)))
-- eqFstSnd A B u v = undefined
--   where IdSig : U
--         IdSig = Id (Sigma A B) u v

--         SigId : U
--         SigId = Sigma (Id A (fst A B u) (fst A B v))
--                   (\p -> IdS A B (fst A B u) (fst A B v) p (snd A B u) (snd A B v))

--         f : IdSig -> SigId
--         f p = pair (eqFst A B u v p) (eqSnd A B u v p)

--         g : SigId -> IdSig
--         g = split pair p1 p2 -> mapOnPathS A B (Sigma A B) (\a b -> pair a b)
--                                            (fst A B u) (fst A B v) p1
--                                            (snd A B u) (snd A B v) p2


eqFstSnd : (A : U) (B : A -> U) (a0 a1 : A) (b0 : B a0) (b1 : B a1) ->
           Id U
             (Id (Sigma A B) (a0, b0) (a1, b1))
	     (Sigma (Id A a0 a1) (\p -> IdS A B a0 a1 p b0 b1))
eqFstSnd A B a0 a1 b0 b1 = isEquivEq IdSig SigId f
                           (gradLemma IdSig SigId f g section_fg retract_fg)
  where IdSig : U
        IdSig = Id (Sigma A B) (a0, b0) (a1, b1)

        SigId : U
        SigId = Sigma (Id A a0 a1) (\p -> IdS A B a0 a1 p b0 b1)

        f : IdSig -> SigId
        f p = (eqFst A B (a0,b0) (a1,b1) p, eqSnd  A B (a0,b0) (a1,b1) p)

          -- pair (eqPair1 A B a0 a1 b0 b1 p) (eqPair2 A B a0 a1 b0 b1 p)

        g : SigId -> IdSig
        g z =  mapOnPathS A B (Sigma A B) (\a b -> (a, b)) a0 a1 z.1 b0 b1 z.2

        section_fg : section IdSig SigId f g
        section_fg z = refl SigId z

        retract_fg : (p : IdSig) -> Id IdSig (g (f p)) p
        retract_fg z = refl IdSig z
