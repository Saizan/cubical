module heterogeneous where

import primitive
import prelude
import gradLemma1

eqFst : (A : U) (B : A -> U) (u v : Sigma A B) ->
        Id (Sigma A B) u v -> Id A u.1 v.1
eqFst A B = mapOnPath (Sigma A B) A (fst A B)

eqSnd : (A : U) (B : A -> U) (u v : Sigma A B) (p : Id (Sigma A B) u v) ->
        IdS A B u.1 v.1 (eqFst A B u v p) u.2 v.2
eqSnd A B = mapOnPathD (Sigma A B) (\x -> B x.1) (snd A B)

eqPair1 : (A : U) (B : A -> U) (a0 a1 : A) (b0 : B a0) (b1 : B a1) ->
        Id (Sigma A B) (a0,b0) (a1,b1) -> Id A a0 a1
eqPair1 A B a0 a1 b0 b1 = eqFst A B (a0,b0) (a1,b1)

-- eqPair2 : (A : U) (B : A -> U) (a0 a1 : A) (b0 : B a0) (b1 : B a1)
--        (p : Id (Sigma A B) (pair a0 b0) (pair a1 b1)) ->
--        IdS A B a0 a1 (eqPair1 A B a0 a1 b0 b1 p) b0 b1
-- eqPair2 A B a0 a1 b0 b1 = eqSnd A B (pair a0 b0) (pair a1 b1)

-- expandedPair : (A : U) (B : A -> U) -> Sigma A B -> Sigma A B
-- expandedPair A B x = pair (fst A B x) (snd A B x)

-- conversion test:
reflIdIdP : (A:U) (a b : A) -> Id U (Id A a b) (IdP A A (refl U A) a b)
reflIdIdP A a b = refl U (Id A a b)

-- conversion test:
reflS : (A:U) (F:A -> U) (a:A) (b : F a) -> IdS A F a a (refl A a) b b
reflS A F a b = refl (F a) b

-- conversion test:
composeMapOnPath : (A : U) (B : A -> U) (u v : Sigma A B) ->
                   (p : Id (Sigma A B) u v) ->
  Id (Id U (B (fst A B u)) (B (fst A B v)))
    (mapOnPath (Sigma A B) U (\x -> B (fst A B x)) u v p)
    (mapOnPath A U B (fst A B u) (fst A B v) (mapOnPath (Sigma A B) A (fst A B) u v p))
composeMapOnPath A B u v p = refl (Id U (B (fst A B u)) (B (fst A B v)))
          (mapOnPath (Sigma A B) U (\x -> B (fst A B x)) u v p)

eqFstSnd : (A : U) (B : A -> U) (a0 a1 : A) (b0 : B a0) (b1 : B a1) ->
           Id U
             (Id (Sigma A B) (a0, b0) (a1, b1))
	     (Sigma (Id A a0 a1) (\p -> IdS A B a0 a1 p b0 b1))
eqFstSnd A B a0 a1 b0 b1 = isEquivEq IdSig SigId f
                           (gradLemma IdSig SigId f g (refl SigId) (refl IdSig))
  where IdSig : U
        IdSig = Id (Sigma A B) (a0, b0) (a1, b1)

        SigId : U
        SigId = Sigma (Id A a0 a1) (\p -> IdS A B a0 a1 p b0 b1)

        f : IdSig -> SigId
        f p = (eqFst A B (a0,b0) (a1,b1) p, eqSnd  A B (a0,b0) (a1,b1) p)


        g : SigId -> IdSig
        g z =  mapOnPathS A B (Sigma A B) (\a b -> (a, b)) a0 a1 z.1 b0 b1 z.2


eqSubstSig : (A : U) (B : A -> U) (a0 a1 : A) (p:Id A a0 a1) (b0 : B a0) (b1 : B a1) ->
           Id U (IdS A B a0 a1 p b0 b1) (Id (B a1) (subst A B a0 a1 p b0) b1)
eqSubstSig A B a0 =
 J A a0 (\ a1 p -> (b0 : B a0) (b1 : B a1) ->
                    Id U (IdS A B a0 a1 p b0 b1) (Id (B a1) (subst A B a0 a1 p b0) b1))
        rem
  where rem :(b0 b1 :B a0) -> Id U (Id (B a0) b0 b1) (Id (B a0) (subst A B a0 a0 (refl A a0) b0) b1)
        rem b0 b1 = mapOnPath (B a0) U (\ b -> Id (B a0) b b1) 
                     b0 (subst A B a0 a0 (refl A a0) b0) (substeq A B a0 b0)


-- an application for Guillaume's example

transpL : (A:U)(a b:A) -> Id A a b -> Id A a a -> Id A b b
transpL A a b p l = (compInv A a b b p (comp A a a b l p))

lemTranspL : (A:U)(a:A)(l:Id A a a) -> Id (Id A a a) l (transpL A a a (refl A a) l)
lemTranspL A a l = rem2
 where
  l1 : Id A a a
  l1 = comp A a a a l (refl A a)
  rem : Id (Id A a a) l1 l
  rem = compIdr A a a l
  rem1 : Id (Id A a a) l1 (compInv A a a a (refl A a) l1) 
  rem1 = compInvIdl' A a a l1
  rem2 : Id (Id A a a) l (compInv A a a a (refl A a) l1) 
  rem2 = compInv (Id A a a) l1 l (compInv A a a a (refl A a) l1) rem rem1

lemTranspL1 : (A:U)(a:A)(l:Id A a a) -> Id (Id A a a) l (transpL A a a l l)
lemTranspL1 A a l = lemInv A a a a l l

lemG0 : (A:U)(a b:A)(p:Id A a b)(l : Id A a a) -> 
        IdS A (\ x -> Id A x x) a b p l (transpL A a b p l)
lemG0 A a = J A a (\ b p -> (l : Id A a a) -> IdS A (\ x -> Id A x x) a b p l (transpL A a b p l))
              (lemTranspL A a)

lemG1 : (A:U)(a:A)(l:Id A a a) -> IdS A (\ x -> Id A x x) a a l l l
lemG1 A a l = 
 substInv (Id A a a) (IdS A (\ x -> Id A x x) a a l l) l (transpL A a a l l) 
    (lemTranspL1 A a l) (lemG0 A a a l l)

