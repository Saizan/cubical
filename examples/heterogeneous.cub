module heterogeneous where

import primitive
import prelude
import gradLemma1

eqFst : (A : U) (B : A -> U) (u v : Sigma A B) ->
        Id (Sigma A B) u v -> Id A (fst A B u) (fst A B v)
eqFst A B = mapOnPath (Sigma A B) A (fst A B)

eqSnd : (A : U) (B : A -> U) (u v : Sigma A B) (p : Id (Sigma A B) u v) ->
        IdS A B (fst A B u) (fst A B v) (eqFst A B u v p) (snd A B u) (snd A B v)
eqSnd A B = mapOnPathD (Sigma A B) (\x -> B (fst A B x)) (snd A B)

eqPair1 : (A : U) (B : A -> U) (a0 a1 : A) (b0 : B a0) (b1 : B a1) ->
        Id (Sigma A B) (pair a0 b0) (pair a1 b1) -> Id A a0 a1
eqPair1 A B a0 a1 b0 b1 = eqFst A B (pair a0 b0) (pair a1 b1)

eqPair2 : (A : U) (B : A -> U) (a0 a1 : A) (b0 : B a0) (b1 : B a1)
        (p : Id (Sigma A B) (pair a0 b0) (pair a1 b1)) ->
        IdS A B a0 a1 (eqPair1 A B a0 a1 b0 b1 p) b0 b1
eqPair2 A B a0 a1 b0 b1 = eqSnd A B (pair a0 b0) (pair a1 b1)

expandedPair : (A : U) (B : A -> U) -> Sigma A B -> Sigma A B
expandedPair A B x = pair (fst A B x) (snd A B x)

eqSurjPair : (A : U) (B : A -> U) ->
  Id (Sigma A B -> Sigma A B) (expandedPair A B) (\x -> x)
eqSurjPair A B = funExt (Sigma A B) (\_ -> Sigma A B)
             (expandedPair A B) (\x -> x)
             (split {pair a b -> refl (Sigma A B) (pair a b)})

-- conversion test:
reflIdIdP : (A:U) (a b : A) -> Id U (Id A a b) (IdP A A (refl U A) a b)
reflIdIdP A a b = refl U (Id A a b)

-- conversion test:
reflS : (A:U) (F:A -> U) (a:A) (b : F a) -> IdS A F a a (refl A a) b b
reflS A F a b = refl (F a) b

-- conversion test:
composeMapOnPath : (A : U) (B : A -> U) (u v : Sigma A B) ->
                   (p : Id (Sigma A B) u v) ->
  Id (Id U (B (fst A B u)) (B (fst A B v)))
    (mapOnPath (Sigma A B) U (\x -> B (fst A B x)) u v p)
    (mapOnPath A U B (fst A B u) (fst A B v) (mapOnPath (Sigma A B) A (fst A B) u v p))
composeMapOnPath A B u v p = refl (Id U (B (fst A B u)) (B (fst A B v)))
          (mapOnPath (Sigma A B) U (\x -> B (fst A B x)) u v p)


-- eqFstSnd : (A : U) (B : A -> U) (u v : Sigma A B) ->
--            Id U
--              (Id (Sigma A B) u v)
-- 	     (Sigma (Id A (fst A B u) (fst A B v))
--                     (\p -> IdS A B (fst A B u) (fst A B v) p (snd A B u) (snd A B v)))
-- eqFstSnd A B u v = undefined
--   where IdSig : U
--         IdSig = Id (Sigma A B) u v

--         SigId : U
--         SigId = Sigma (Id A (fst A B u) (fst A B v))
--                   (\p -> IdS A B (fst A B u) (fst A B v) p (snd A B u) (snd A B v))

--         f : IdSig -> SigId
--         f p = pair (eqFst A B u v p) (eqSnd A B u v p)

--         g : SigId -> IdSig
--         g = split pair p1 p2 -> mapOnPathS A B (Sigma A B) (\a b -> pair a b)
--                                            (fst A B u) (fst A B v) p1
--                                            (snd A B u) (snd A B v) p2


eqFstSnd : (A : U) (B : A -> U) (a0 a1 : A) (b0 : B a0) (b1 : B a1) ->
           Id U
             (Id (Sigma A B) (pair a0 b0) (pair a1 b1))
	     (Sigma (Id A a0 a1) (\p -> IdS A B a0 a1 p b0 b1))
eqFstSnd A B a0 a1 b0 b1 = isEquivEq IdSig SigId f
                           (gradLemma IdSig SigId f g section_fg retract_fg)
  where IdSig : U
        IdSig = Id (Sigma A B) (pair a0 b0) (pair a1 b1)

        SigId : U
        SigId = Sigma (Id A a0 a1) (\p -> IdS A B a0 a1 p b0 b1)

        f : IdSig -> SigId
        f p = pair (eqPair1 A B a0 a1 b0 b1 p) (eqPair2 A B a0 a1 b0 b1 p)

        g : SigId -> IdSig
        g = split pair p1 p2 -> mapOnPathS A B (Sigma A B) (\a b -> pair a b)
                                           a0 a1 p1 b0 b1 p2

        section_fg : section IdSig SigId f g
        section_fg = split pair p1 p2 -> refl SigId (pair p1 p2)

        retract_fg : (p : IdSig) -> Id IdSig (g (f p)) p
        retract_fg p = undefined  -- refl IdSig p
          where
            IdSigD : (h : Sigma A B -> Sigma A B) -> U
            IdSigD h = Id (Sigma A B) (h (pair a0 b0)) (h (pair a1 b1))

            sthg : (h : Sigma A B -> Sigma A B) -> IdSigD h
            sthg h = mapOnPath (Sigma A B) (Sigma A B) h
                               (pair a0 b0) (pair a1 b1) p

            -- test : Id IdSig (sthg (expandedPair A B)) (sthg (\x -> x))
            -- test : IdS (Sigma A B -> Sigma A B) IdSigD
            --            (expandedPair A B) (\x -> x) (eqSurjPair A B)
            --            (sthg (expandedPair A B)) (sthg (\x -> x))
            test : IdP IdSig IdSig
                    (mapOnPath (Sigma A B -> Sigma A B) U
                      IdSigD (expandedPair A B) (\x -> x) (eqSurjPair A B))
                    (sthg (expandedPair A B)) (sthg (\x -> x))
            test = mapOnPathD (Sigma A B -> Sigma A B) IdSigD sthg
                      (expandedPair A B) (\x -> x) (eqSurjPair A B)

        -- test : (p : IdSig) -> Id IdSig (g (f p))
        --        (mapOnPath (Sigma A B) (Sigma A B)
        --                   (expandedPair A B)
        --                   (pair a0 b0) (pair a1 b1) p)
        -- test p = refl IdSig (g (f p))

	-- test2 : (u v : Sigma A B) (p : Id (Sigma A B) u v) ->
	--          Id (Id (Sigma A B) u v)
	-- 	    (mapOnPath (Sigma A B) (Sigma A B) (expandedPair A B) u v p)
        --              p
        -- test2 = undefined


          -- where
          --   IdSigD : (h : Sigma A B -> Sigma A B) -> U
          --   IdSigD h = Id (Sigma A B) (h (pair a0 b0)) (h (pair a1 b1))

          --   sthg : (h : Sigma A B -> Sigma A B) -> IdSigD h
          --   sthg h = mapOnPath (Sigma A B) (Sigma A B) h
          --                      (pair a0 b0) (pair a1 b1) p

            -- test : Id IdSig (sthg (expandedPair A B)) (sthg (\x -> x))
            -- test : IdS (Sigma A B -> Sigma A B) IdSigD
            --            (expandedPair A B) (\x -> x) (eqSurjPair A B)
            --            (sthg (expandedPair A B)) (sthg (\x -> x))
            -- test : IdP IdSig IdSig
            --         (mapOnPath (Sigma A B -> Sigma A B) U
            --           IdSigD (expandedPair A B) (\x -> x) (eqSurjPair A B))
            --         (sthg (expandedPair A B)) (sthg (\x -> x))
            -- test = mapOnPathD (Sigma A B -> Sigma A B) IdSigD sthg
            --           (expandedPair A B) (\x -> x) (eqSurjPair A B)


-- IdP : (A B :U) -> Id U A B -> A -> B -> U

-- IdS : (A:U) (F:A -> U) (a0 a1:A) (p:Id A a0 a1) -> F a0 -> F a1 -> U
-- IdS A F a0 a1 p = IdP (F a0) (F a1) (mapOnPath A U F a0 a1 p)

-- mapOnPathD : (A : U) (F : A -> U) (f : (x : A) -> F x)
-- (a0 a1 : A) (p : Id A a0 a1) ->
--              IdS A F a0 a1 p  (f a0) (f a1)


-- eqSurjPair : (A : U) (B : A -> U) ->
--   Id (Sigma A B -> Sigma A B) (\x -> pair (fst A B x) (snd A B x)) (\x -> x)

        -- test2 : sthg expandedPair
        -- test2 p = refl IdSig (g (f p))
        -- test : (p : IdSig) -> Id IdSig (g (f p))
        --        (mapOnPath (Sigma A B) (Sigma A B)
        --                   (\x -> pair (fst A B x) (snd A B x))
        --                   (pair a0 b0) (pair a1 b1) p)
        -- test p = refl IdSig (g (f p))

        -- test2 : (p : IdSig) -> Id IdSig
        --        (mapOnPath (Sigma A B) (Sigma A B)
        --                   (\x -> pair (fst A B x) (snd A B x))
        --                   (pair a0 b0) (pair a1 b1) p)
        --        p
        -- test2 p = refl IdSig (g (f p))


-- mapOnPath : (A B : U) (f : A -> B) (a b : A) (p : Id A a b) ->
-- appOnPath : (A B : U) (f g : A -> B) (a b : A)
-- (q:Id (A->B) f g) -> (p : Id A a b) -> Id B (f a) (g b)
--   Id B (f a) (f b)
        -- test2 : (p : IdSig) -> Id IdSig
        --        (mapOnPath (Sigma A B) (Sigma A B)
        --                   (\x -> pair (fst A B x) (snd A B x))
        --                   (pair a0 b0) (pair a1 b1) p)
        --        p
        -- test2 p = undefined

        -- test3 : (p: IdSig) -> Id (SigId -> SigId)
        --             (\x -> x)
        --             (mapOnPath (Sigma A B) (Sigma A B)
        --                   (\x -> pair (fst A B x) (snd A B x))
        --                   (pair a0 b0) (pair a1 b1))
        -- test3 = undefined



-- eqSurjPair : (A : U) (B : A -> U) ->
--   Id (Sigma A B -> Sigma A B) (\x -> pair (fst A B x) (snd A B x)) (\x -> x)

        -- test2 : sthg expandedPair
        -- test2 p = refl IdSig (g (f p))

	-- sthg id


        -- f p : SigId
        -- g (f p) = mapOnPathD A B (Sigma A B) (\x -> pair (fst A B x) (snd A B x)) (pair a0 b0) (pair a1 b1) p

-- surjPair : (A:U) (B:A -> U) -> (s:Sigma A B) -> Id (Sigma A B) (pair (fst A B s) (snd A B s)) s

-- Id (<2> Id (<2> Sigma ("X1", "X2"))
--            (pair ("X3") ("X5")) (pair ("X4") ("X6")))
--    ("X8") ("X8")
-- /=
-- Id (<2> Id (<2> Sigma ("X1", "X2"))
--            (pair ("X3") ("X5")) (pair ("X4") ("X6")))
--    (<2> pair (fst1 ("X8" @ 2)) (snd2 ("X8" @ 2))) ("X8")


-- eqFstSnd : (A : U) (B : A -> U) (u v : Sigma A B) ->
--            Id U
--              (Id (Sigma A B) u v)
-- 	     (Sigma (Id A (fst A B u) (fst A B v))
--                     (\p -> IdS A B (fst A B u) (fst A B v) p (snd A B u) (snd A B v)))
-- eqFstSnd A B u v = undefined
--   where IdSig : U
--         IdSig = Id (Sigma A B) u v

--         SigId : U
--         SigId = Sigma (Id A (fst A B u) (fst A B v))
--                   (\p -> IdS A B (fst A B u) (fst A B v) p (snd A B u) (snd A B v))

--         f : IdSig -> SigId
--         f p = pair (eqFst A B u v p) (eqSnd A B u v p)

--         g : SigId -> IdSig
--         g = split pair p1 p2 -> mapOnPathS A B (Sigma A B) (\a b -> pair a b)
--                                            (fst A B u) (fst A B v) p1
--                                            (snd A B u) (snd A B v) p2


-- mapOnPathS : (A:U)(F:A -> U) (C:U) (f: (x:A) -> F x -> C) (a0 a1 : A) (p:Id A a0 a1)
--              (b0:F a0) (b1:F a1) (q : IdS A F a0 a1 p b0 b1) -> Id C (f a0 b0) (f a1 b1)


-- eqSnd A B u v p = mapOnPathD A B (\a -> snd A B) (fst A B u) (fst A B v) (eqFst A B u v p)

-- IdP : (A B :U) -> Id U A B -> A -> B -> U
-- IdP = PN

-- IdS : (A:U) (F:A -> U) (a0 a1:A) (p:Id A a0 a1) -> F a0 -> F a1 -> U
-- IdS A F a0 a1 p = IdP (F a0) (F a1) (mapOnPath A U F a0 a1 p)


-- snd : (A : U) (B : A -> U) (p : Sigma A B) -> B (fst A B p)

-- mapOnPathD : (A : U) (F : A -> U) (f : (x : A) -> F x) (a0 a1 : A) (p : Id A a0 a1) ->
--              IdS A F a0 a1 p  (f a0) (f a1)


 -- subst (Sigma A B) P u v p reflSnd p

 --  where IdSnd : (x : Sigma A B) -> Id (Sigma A B) u x -> U
 --        IdSnd x p = IdS A B (fst A B u) (fst A B x) (eqFst A B u x p) (snd A B u) (snd A B x)

 --        P : Sigma A B -> U
 --        P x = (p : Id (Sigma A B) u x) -> IdSnd x p

 --        reflSnd : P u
 --        reflSnd p = undefined -- subst  (refl (B (fst A B u)) (snd A B u)) -- : IdSnd u p

-- IdP : (A B :U) -> Id U A B -> A -> B -> U
-- IdP = PN
-- subst : (A : U) (P : A -> U) (a x : A) (p : Id A a x) -> P a -> P x
-- Sigma : (A : U) (B : A -> U) -> U
-- IdS : (A:U) (F:A -> U) (a0 a1:A) (p:Id A a0 a1) -> F a0 -> F a1 -> U
