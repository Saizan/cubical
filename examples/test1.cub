module univalence where

import axChoice

-- now we try to prove univalence
-- the identity is an equivalence

-- the transport of the reflexity is equal to the identity function

transpReflId : (A:U) -> Id (A->A) (id A) (transport A A (refl U A))
transpReflId A = funExt A (\ _ -> A)  (id A) (transport A A (refl U A)) (transportRef A)

-- the transport of any equality proof is an equivalence

transpIsEquiv : (A B:U) -> (p:Id U A B) -> isEquiv A B (transport A B p)
transpIsEquiv A = J U A (\ B p -> isEquiv A B (transport A B p)) rem
 where rem : isEquiv A A (transport A A (refl U A))
       rem = subst (A -> A) (isEquiv A A)  (id A) (transport A A (refl U A)) (transpReflId A) (idIsEquiv A)

Equiv : U -> U -> U
Equiv A B = Sigma (A->B) (isEquiv A B)

funEquiv : (A B : U) -> Equiv A B -> A -> B
funEquiv A B = fst (A->B) (isEquiv A B)

eqEquiv : (A B : U) (e0 e1:Equiv A B) -> Id (A -> B) (funEquiv A B e0) (funEquiv A B e1) -> Id (Equiv A B) e0 e1
eqEquiv A B = undefined --  eqPropFam (A->B) (isEquiv A B) (propIsEquiv A B)

IdToEquiv : (A B:U) -> Id U A B -> Equiv A B
IdToEquiv A B p = pair (transport A B p) (transpIsEquiv A B p)

EquivToId : (A B:U) -> Equiv A B -> Id U A B
EquivToId A B = split
                  pair f ef -> isEquivEq A B f ef


test : (A B : U) (f : A -> B) 
        (s : (y : B) -> fiber A B f y) -> 
        (t : (y : B) -> (v : fiber A B f y) -> Id (fiber A B f y) (s y) v) ->
         Id (Equiv A B) (pair f (pair s t))
                        (pair (transport A B (equivEq A B f s t)) (transpIsEquiv A B (equivEq A B f s t)))
test A B f s t = eqEquiv A B (pair f (pair s t))
                             (pair (transport A B (equivEq A B f s t)) (transpIsEquiv A B (equivEq A B f s t)))
                             undefined -- rem3


retIdEquiv : (A B :U) (s : Equiv A B) -> Id (Equiv A B) (IdToEquiv A B (EquivToId A B s)) s
retIdEquiv A B s = inv (Equiv A B) s (IdToEquiv A B (EquivToId A B s)) undefined -- (rem s)
 where
   rem : (s : Equiv A B) -> Id (Equiv A B) s (IdToEquiv A B (EquivToId A B s))
   rem = 
     split
       pair f ef -> 
          rem1 ef
            where
              rem1 : (ef : isEquiv A B f) -> 
                      Id (Equiv A B) (pair f ef) (pair (transport A B (isEquivEq A B f ef)) (transpIsEquiv A B (isEquivEq A B f ef)))
              rem1 = 
                split
                 pair s t -> undefined -- rem2
                  where
                    rem2 : Id (Equiv A B) (pair f (pair s t))
                                          (pair (transport A B (equivEq A B f s t)) (transpIsEquiv A B (equivEq A B f s t)))
                    rem2 = undefined -- eqEquiv A B (pair f (pair s t))
--                                        (pair (transport A B (equivEq A B f s t)) (transpIsEquiv A B (equivEq A B f s t)))
--                                        undefined -- rem3

