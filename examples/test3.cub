module test where

import primitive

Unit : U
data Unit = tt

test : (a : Unit) (C : (x : Unit) -> Id Unit a x -> U) (d : C a (refl Unit a)) (x : Unit) (p : Id Unit a x) 
        -> Id (C x p) (J Unit a C d x p) (J Unit a C d x p)
test a C d x p = refl (C x p) (J Unit a C d x p)



-- test : (P : Unit -> U) (a x : Unit) (p : Id Unit a x) (d: P a) -> 
--          Id (P x) (subst Unit P a x p d) (subst Unit P a x p d)
-- test P a x p d = refl (P x) (subst Unit P a x p d)


-- test : (a b c : Unit) (p : Id Unit a b) (q: Id Unit b c) 
--        -> Id (Id Unit a c) (comp Unit a b c p q) (comp Unit a b c p q)
-- test a b c p q = refl (Id Unit a c) (comp Unit a b c p q)



-- test : (a a' b b': Unit) (p:Id Unit a a') (q: Id Unit b b') (r: Id Unit a' b') -> 
--        Id (Id Unit a b) (compDown Unit a a' b b' p q r) (compDown Unit a a' b b' p q r)
-- test a a' b b' p q r = 
--  refl (Id Unit a b) (compDown Unit a a' b b' p q r)

-- test : (a b c : Unit) -> (p : Id Unit a b) -> (q q' : Id Unit b c) ->
--        ( h : Id (Id Unit a c) (comp Unit a b c p q) (comp Unit a b c p q'))
--         -> Id (Id (Id Unit b c) q q') (lemSimpl Unit a b c p q q' h) (lemSimpl Unit a b c p q q' h)
-- test a b c p q q' h =
--  refl (Id (Id Unit b c) q q') (lemSimpl Unit a b c p q q' h)

-- test : (pA:prop Unit) -> Id (UIP Unit) (propUIP Unit pA) (propUIP Unit pA)
-- test pA = refl (UIP Unit) (propUIP Unit pA)



-- test2 : Id (set Unit) lemunit lemunit
-- test2 = refl (set Unit) lemunit


